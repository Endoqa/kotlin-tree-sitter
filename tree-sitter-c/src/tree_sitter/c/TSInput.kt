// this file is auto generated by endoqa kotlin ffi, modify it with caution
package tree_sitter.c

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.VarHandle

@JvmInline
public value class TSInput(
    public val `$mem`: MemorySegment,
) {
    public var payload: Pointer<Unit>
        get() = TSInput.payloadHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            TSInput.payloadHandle.set(this.`$mem`, 0L, value)
        }

    public var read: Pointer<(
        payload: Pointer<Unit>,
        byte_index: uint32_t,
        position: TSPoint,
        bytes_read: Pointer<uint32_t>,
    ) -> Pointer<Byte>>
        get() = TSInput.readHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            TSInput.readHandle.set(this.`$mem`, 0L, value)
        }

    public var encoding: TSInputEncoding
        get() = TSInputEncoding.fromInt(TSInput.encodingHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            TSInput.encodingHandle.set(this.`$mem`, 0L, value.value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(TSInput.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("payload"),
            `$RuntimeHelper`.POINTER.withName("read"),
            ValueLayout.JAVA_INT.withName("encoding"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
        ).withName("TSInput")

        @JvmField
        public val payloadHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("payload"))

        @JvmField
        public val readHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("read"))

        @JvmField
        public val encodingHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("encoding"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): TSInput = TSInput(alloc.allocate(TSInput.layout))

        public fun interface read {
            public fun invoke(
                payload: Pointer<Unit>,
                byte_index: uint32_t,
                position: TSPoint,
                bytes_read: Pointer<uint32_t>,
            ): Pointer<Byte>

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(read::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_INT,
                    TSPoint.layout,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }
    }
}
