// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.tree_sitter

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class TSLanguageMetadata(
    public val `$mem`: MemorySegment,
) {
    public var major_version: UByte
        get() = (major_versionHandle.get(this.`$mem`, 0L) as Byte).toUByte()
        set(`value`) {
            major_versionHandle.set(this.`$mem`, 0L, value.toByte())
        }

    public var minor_version: UByte
        get() = (minor_versionHandle.get(this.`$mem`, 0L) as Byte).toUByte()
        set(`value`) {
            minor_versionHandle.set(this.`$mem`, 0L, value.toByte())
        }

    public var patch_version: UByte
        get() = (patch_versionHandle.get(this.`$mem`, 0L) as Byte).toUByte()
        set(`value`) {
            patch_versionHandle.set(this.`$mem`, 0L, value.toByte())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_BYTE.withName("major_version"),
            ValueLayout.JAVA_BYTE.withName("minor_version"),
            ValueLayout.JAVA_BYTE.withName("patch_version"),
        ).withName("TSLanguageMetadata")

        @JvmField
        public val major_versionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("major_version"))

        @JvmField
        public val minor_versionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("minor_version"))

        @JvmField
        public val patch_versionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("patch_version"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): TSLanguageMetadata =
            TSLanguageMetadata(alloc.allocate(layout))
    }
}
