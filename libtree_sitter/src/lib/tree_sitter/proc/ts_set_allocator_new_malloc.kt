// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.tree_sitter.proc

import lib.tree_sitter.`$RuntimeHelper`
import lib.tree_sitter.CFunctionInvoke
import lib.tree_sitter.Pointer
import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles

/**
 *
 * Set the allocation functions used by the library.
 *
 * By default, Tree-sitter uses the standard libc allocation functions,
 * but aborts the process when an allocation fails. This function lets
 * you supply alternative allocation functions at runtime.
 *
 * If you pass `NULL` for any parameter, Tree-sitter will switch back to
 * its default implementation of that function.
 *
 * If you call this function after the library has already been used, then
 * you must ensure that either:
 * 1. All the existing objects have been freed.
 * 2. The new allocator shares its state with the old one, so it is capable
 * of freeing memory that was allocated by the old allocator.
 */
public fun interface ts_set_allocator_new_malloc {
    @CFunctionInvoke
    public fun invoke(`$p0`: ULong): Pointer<Unit>

    public fun allocate(arena: Arena): MemorySegment =
        Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

    public companion object {
        @JvmStatic
        public val invokeHandle: MethodHandle =
            MethodHandles.lookup().unreflect(ts_set_allocator_new_malloc::class.java.methods.find {
                it.getAnnotation(CFunctionInvoke::class.java) != null
            }
            )

        @JvmStatic
        public val fd: FunctionDescriptor = FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    }
}
