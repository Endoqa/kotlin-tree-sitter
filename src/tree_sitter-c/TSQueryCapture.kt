// this file is auto generated by endoqa kotlin ffi, modify it with caution
package tree_sitter

import java.lang.foreign.MemoryLayout
import java.lang.foreign.MemorySegment
import java.lang.foreign.StructLayout
import java.lang.foreign.ValueLayout
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle
import kotlin.Int
import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline

@JvmInline
public value class TSQueryCapture(
    public val `$mem`: MemorySegment,
) {
    public var node: TSNode
        get() = TSNode(TSQueryCapture.nodeHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.node.`$mem`, 0L, TSNode.layout.byteSize())
        }

    public var index: uint32_t
        get() = (TSQueryCapture.indexHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            TSQueryCapture.indexHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            TSNode.layout.withName("node"),
            ValueLayout.JAVA_INT.withName("index"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
        ).withName("TSQueryCapture")

        @JvmField
        public val nodeHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("node"))

        @JvmField
        public val indexHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("index"))
    }

    @JvmInline
    value class Array(val mem: MemorySegment) {

        constructor(mem: MemorySegment, size: uint32_t) : this(mem.reinterpret(size.toLong() * layout.byteSize()))

        operator fun get(i: uint32_t): TSQueryCapture {
            return TSQueryCapture(mem.asSlice(i.toLong() * layout.byteSize(), layout.byteSize()))
        }

    }
}
